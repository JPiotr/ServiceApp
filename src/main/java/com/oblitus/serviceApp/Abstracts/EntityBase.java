package com.oblitus.serviceApp.Abstracts;

import com.oblitus.serviceApp.Modules.Admin.User;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Base class for every Entity in application.
 */
@AllArgsConstructor
@MappedSuperclass
public abstract class EntityBase{
    /**
     * Autogenerated UUID = Database ID
     */
    @Getter
    @Id
    protected UUID ID;
    @Getter
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    protected int Number;
    @Getter
    @CreatedDate
    protected LocalDateTime CreationDate;
    @Getter
    @LastModifiedDate
    protected LocalDateTime LastModificationDate;
    public Boolean ReadOnly;
    protected Boolean Locked;
    @Getter
    @Setter
    @ManyToOne(targetEntity = User.class)
    protected User Creator;
    @Getter
    @Setter
    @ManyToOne(targetEntity = User.class)
    protected User LastEditedBy;

    /**
     * Constructor witch set properties:
     * @ID = Random UUID
     * @CreationDate = Now
     * @LastModyficationDate = Now
     * @ReadOnly = false
     * @Locked = false
     */
    public EntityBase() {
        ID = UUID.randomUUID();
        CreationDate = LocalDateTime.now();
        LastModificationDate = LocalDateTime.now();
        Creator = null;
        ReadOnly = false;
        Locked = false;
    }

    public EntityBase(String uuid){
        ID = UUID.fromString(uuid);
        CreationDate = LocalDateTime.now();
        LastModificationDate = LocalDateTime.now();
        Creator = null;
        ReadOnly = false;
        Locked = false;

    }

    /**
     * Method make Entity locked
     */
    public void lockData(){
        setLastModificationDate();
        Locked = true;
    }

    public boolean isLocked(){
        return Locked;
    }

    public void setLastModificationDate() {
        LastModificationDate = LocalDateTime.now();
    }

    public EntityBase setReadOnly(Boolean readOnly) {
        setLastModificationDate();
        ReadOnly = readOnly;
        return this;
    }

}
